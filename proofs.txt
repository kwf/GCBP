See https://www.math.upenn.edu/~wilf/PIMS/PIMSLectures.pdf for some
good background.


Proof of GCBP from Garsia-Milne:

Given (m : A0 + A1 <-> B0 + B1) and (s : A1 <-> B1).  Let A+ = A0+A1,
similarly for B+.  Let A- = A1, B- = B1.  Define alpha : A+ <-> A-
which leaves A0 alone and swaps the A1 part of A+ with A-, similarly
for beta : B+ <-> B-.  Then Garsia-Milne constructs a bijection A0 <->
B0 (in fact, the same one that GCBP constructs).

Proof of G-M from GCBP:

Set A0 = F_alpha etc.  Set A1 = A - F_alpha.  f is a bijection between
A0 + A1.  For the bijection between A1 <-> B1, do what f does on A- /
B-, and then do the same thing on A+ - F_alpha / B+ - F_beta under the
correspondences induced by alpha / beta.

Does this give the same function as G-M would??? (Yes.)

-----

Car thoughts:

- We can use empty instead of (leftPartial current), because (due to merge) we never use it. You can see this because IO version doesn't change.
- We want to do algebraic stuff with three operators: (.) (|||) and (<>).
- How is left-biased (<>) defined? In order to produce a bijection, it needs to only add edges that don't conflict in *either* direction. (example: (1<->2,2<->3) <> id is not bijective w/o this)
- If you compose bijections in the "wrong" way, this /works/ if you only ever look at palindromes. Wrong way: (f, f^-1) . (g, g^-1) = (f . g, f^1 . g^1). [The types don't line up this way...] You have to coalesce by pairs...
- We think that there's an "abides" between all three pairs of operators. Is this the case?
