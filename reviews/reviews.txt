ICFP '18 Paper #107 Reviews and Comments
===========================================================================
Paper #107 What's the Difference? A Functional Pearl on Subtracting
Bijections


Review #107A
===========================================================================

Overall merit
-------------
B. OK paper, but I will not champion it

Reviewer expertise
------------------
X. I am an expert in this area

Paper summary
-------------
This paper is a functional pearl that develops an efficient
implementation of a difference operator for bijections in Haskell. It
is illustrated with pretty diagrams and I found it quite pleasant to
read - as a pearl should be.

I must admit, though, I didn't really find much of the development
particularly surprising. I would have been more enthusiastic if the
authors had taken the plunge and exploited the fact that GHC is now a
dependently-typed programming language, in order to constrain the type
of bijections to only represent actual bijections, for
instance. Still, I have no objection to this paper being accepted, and
if it isn't then I would imagine it may be a good fit for the Haskell
Symposium.

Rating rationale and comments for author
----------------------------------------
I can confirm that as a person affected by the most common form of
colour blindness I am indeed able to distinguish the colours in the
diagrams! (I'm not completely sure what to call those colours, but
that's beside the point.)

Your code isn't literate Haskell in that it appears to contain
typos. This is a bit of a shame.

You state that the proof of termination for Gordon's theorem is
classical. It seems to me that there should be an straightforward
constructive termination proof based on defining a finite measure (the
number of elements of B' that have been visited so far) that reduces
after each iteration. I am confused about why this problem is thought
to be in any way non-trivial, but perhaps I am missing something. It
could be an interesting exercise to mechanise the termination proof in
a proof assistant.

14/15: "colorblindness" should be two words

126: "two iterations" |-> "two iterations back and forth"

225/226: GHC is a dependently typed language! I'm a little
disappointed that you haven't tried to take advantage of its support
for dependent types.

258: Why not just include the class definition for Category?

274: "B id id" |-> "B (k return) (k return)", I think

518/519: "glossed since" |-> "glossed over since"

595: It might help to give the class definition for Alternative, if
nothing else in order to illustrate that your funny diamond operator
is <|>. (It would be quite helpful more generally if authors provided
a key showing the mapping from their fancy characters to actual
Haskell code, but this rarely seems to happen.)



Review #107B
===========================================================================

Overall merit
-------------
B. OK paper, but I will not champion it

Reviewer expertise
------------------
Y. I am knowledgeable in this area, but not an expert

Paper summary
-------------
Presents a streamlined method of "subtracting" one bijection from another, improving on a pointwise method originally developed by Gordon. Goes on to develop two optimizations that eliminate quadratic behavior. The constructions are explained in clear, accessible prose and accompanied by an executable Haskell implementation.

Rating rationale and comments for author
----------------------------------------
# Summary

This paper presents an elegant algorithm for computing the difference between two bijections. It on Gordon's complementary bijection principle in three ways:
1. It replaces Gordon's original pointwise construction of the residual bijection with a unified technique that computes the bijection on all elements at once.
2. Its correctness is established by construction rather than using a non-constructive proof. 
3. It incorporates optimizations based on memoization and algebraic identities that improve the running time from quadratic to linear.
The paper is written in a clear, discursive style, and the prose is accompanied by a complete Haskell implementation. 

# Recommendation

Overall, this is a model functional pearl, and one that would be a good fit to be published at ICFP.

# Suggestions

Despite my overall enthusiasm for this paper, I do have a few suggestions for improving it even further.

First, the paper does't make much attempt to go into much detail on potential applications of the technique. Given the broad interest in optics, bidirectional programming, etc. in the ICFP community, this seems like a bit of a missed opportunity.

Second, the paper introduces some apparently spurious abstractions that might obscure rather than enhance the constructions in the middle parts of the paper.

Third, the first point-free construction of the bijection comes off as something of a strawman. Perhaps the paper would be clearer if one jumped straight to the next solution instead?

Fourth, and most significant, unless I missed it, the proof of totality does *not* fall out by construction. This is a major omission!

Fifth, the optimizations are only discussed quickly toward the end of the paper. The ability to incorporate these optimizations in a uniform way is a significant benefit of the point-free approach, so it would be great to hear even more about this.

To be clear: I do not view any of these weaknesses as critical and I very much hope the paper will be accepted at ICFP.

# Detailed Comments

* Abstract: it seems slightly odd to mention the need to print in color in the abstract itself. (And actually, I don't think the paper would be that hard to read in black and white.) Perhaps this could be relegated to a footnote?

* Figure 4: It's a bit of a shame that the Haskell code doesn't resemble the algorithm given in terms of relational operators. In particular, the recursion is hidden in the `untilLeft` function. Would it be clearer to make the two notations align as much as possible?

* Page 5, end of Section 2: I think one could add the possibility of adding optimizations as another benefit of the point-free approach compared to Gordon's technique.

* Page 6: Having gone to so much trouble to spell out Klesli composition, it's a bit strange to not then define Groupoids, which are not discussed in the step at all.

* Page 7: I realize this is likely a literate Haskell document, but could the infix precedence be elided?

* Page 7: For non-Haskell programmers, the digression into pattern synonyms might be distracting.

* Page 9-10: the left partial projection operator, $\rangle \cdot |$, gets a bit lost due to formatting.

* Page 12: unless I missed something, it's not obvious that the "Take 1" algorithm is total.

* Page 13: I believe the information ordering and lub operator are the same as for bijective lenses [TOPLAS '07]. That paper also observes that memoization can eliminate a silly quadratic blowup due to long sequential chains.

* Page 14: Again, is there a constructive proof of totality for the final $\mathrm{gcbp}$ definition? To finish the job at hand -- giving an alternate account of Gordon's algorithm -- this seems like a critical piece. 

* Page 19: The optimization is clear, but it would be nice to see the complete definition with `extendPalindropme` in place of `ext`, even though it's a trivial substitution.



Review #107C
===========================================================================

Overall merit
-------------
A. Good paper, I will champion it

Reviewer expertise
------------------
Y. I am knowledgeable in this area, but not an expert

Paper summary
-------------
This functional pearl presents a series of algorithms to solve a simple problem: given an isomorphism between (A + A') and (B + B') and one between (B + B'), construct an isomorphism between A and A'. The first solution constructs the desired function 'pointwise'; the paper gives a brief proof of correctness and termination. Later sections refine this to a construct the desired isomorphism directly from its constituent parts.

Rating rationale and comments for author
----------------------------------------
This paper is a joy to read. It begins by introducing a seemingly simple problem, before presenting a first solution: bouncing back and forth along the isomorphism until a suitable element in the image is found.

The authors state that 'the proof [of termination] seems to make essential use of classical reasoning' -- this is only partially true. As the sets involved are all finite, you only need to consider at most (something like) |B| + 1 iterations of hg^-i. If all the elements encountered are indeed in B, you can derive a contradiction, hence this process must yield an element in A in finite time -- which is still fine constructively (if you know p does not hold on all elements of a list, you can show there is an element satisfying not p). On the other hand, the last (efficient) solution makes heavy use of partial functions, unbounded recursion, lazy pattern matching, and circular programming (through the memo tables constructed) -- this does undermine the claim a bit that other algorithms may be easier to implement and verify in a proof assistant.

It would be interesting to see basic performance statistics for the earlier versions of the paper also. Or is the first version better than the later ones?

Many of the abstractions used throughout the paper are really not necessary (such as the Category instances or pattern synonyms) -- but they do not distract from the overall story.

The first thought that crossed my mind after seeing the gcbp algorithm (line 663) is that this definition is built from an unfold (iterate) followed by a fold -- and that the 'obvious' next optimisation is to perform some sort of fold fusion. Why not explore this avenue further?

# Minor comments and typos

Line 438 -- Starting the sentence with 'The functions (right and |.>) could be...' makes it easier to distinguish between  the end of the previous sentence and the beginning of the next.

Line 518 -- glossed -> glossed over

Line 570 -- should read (I think) 'if and only if g a = Just b'

GHCI is capitalized as GHCi (at least in the GHC manuals)
